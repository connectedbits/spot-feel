grammar Rubel
  # The main rule with all expression possibilities
  rule expression
    ternary /
    conjunction /
    disjunction /
    comparison /
    inequality /
    equality /
    negation /
    simple_expression /
    sub_expression
  end
  # The ternary operator as a short if variant.
  #
  # Example:
  #   "a ? b : c"
  rule ternary
    condition:(sub_expression / simple_expression) '?' then_expression:expression ':' else_expression:expression {
      def value(context)
        if condition.value(context)
          then_expression.value(context)
        else
          else_expression.value(context)
        end
      end
    }
  end
  # A conjunction (a.k.a. boolean and)
  #
  # Example:
  #   "(a and b) and c"
  rule conjunction
    left:(sub_expression / simple_expression) 'and ' right:expression {
      def value(context)
        left.value(context) && right.value(context) 
      end
    }
  end
  # A disjunction (a.k.a. boolean or)
  #
  # Example:
  #   "(a or b) or c"
  rule disjunction
    left:(sub_expression / simple_expression) 'or ' right:expression {
      def value(context)
        left.value(context) || right.value(context) 
      end
    }
  end
  # A boolean not of the expression
  #
  # Example:
  #   "!a"
  rule negation
    '!' expression {
      def value(context)
        !expression.value(context)
      end
    }
  end
  # Test values for greater, greater or equal, ...
  #
  # Example:
  #   "a < b or a >= c"
  rule comparison
    left:(sub_expression / simple_expression) operator:('<=' / '<' / '>=' / '>') right:expression {
      def value(context)
        case operator.text_value
          when '<' then left.value(context) < right.value(context)
          when '<=' then left.value(context) <= right.value(context)
          when '>=' then left.value(context) >= right.value(context)
          when '>' then left.value(context) > right.value(context)
        end
      end
    }
  end
  # Test values for inequality
  #
  # Example:
  #   "a != b"
  rule inequality
    left:(sub_expression / simple_expression) '!=' right:expression {
      def value(context)
        left.value(context) != right.value(context) 
      end
    }
  end
  rule equality
    left:(sub_expression / simple_expression) '==' right:expression {
      def value(context)
        left.value(context) == right.value(context) 
      end
    }
  end
  rule simple_expression
    space flat_expression space {
      def value(context)
        flat_expression.value(context)
      end
    }
  end
  rule flat_expression
    boolean_constant /
    path /
    integer_number /
    float_number /
    string_literal
  end
  rule sub_expression
    space '(' expression ')' space {
      def value(context)
        expression.value(context)
      end
    }
  end
  rule path
    identifier '.' path {
      def value(context)
        context = identifier.value(context)
        nil if context.nil?
        path.value(context)
      end
    } / identifier '' {
      def value(context)
        identifier.value(context)
      end
    }
  end
  rule identifier
    identifier_letters:([a-zA-Z] [a-zA-Z0-9_]*) '' {
      def value(context)
        identifier_text = identifier_letters.text_value
        if context.has_key?(identifier_text)
          context[identifier_text] 
        else
          context[identifier_text.to_sym]
        end
      end
    }
  end
  rule boolean_constant
    'true' {
      def value(context)
        true
      end
    } / 'false' {
      def value(context)
        false
      end
    }
  end
  rule integer_number
    number_chars:('-'? [0-9]+) !'.' {
      def value(context)
        number_chars.text_value.to_i
      end
    }
  end
  rule float_number
    number_chars:('-'? [0-9]+ '.' [0-9]+) '' {
      def value(context)
        number_chars.text_value.to_f
      end
    }
  end
  rule string_literal
    '"' (!'"' . )* '"' {
      def value(context)
        text_value[1..-2]
      end
    }
  end
  rule space
    [\s\r\n\t]*
  end
end